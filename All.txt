#p1

1. Understanding the basics of Node.js using functions:
A. Write a function in Node.js to calculate the sum of two values.
B. Write a function in Node.js to find the sum of all numbers between two values.
C. Write a function in Node.js to calculate the factorial of a number.
D. Write a function in Node.js to mimic the functions of a calculator (ADD, SUBTRACT, MULTIPLY, DIVIDE).


function add(x, y) {
   return x + y;
}

function sub(x, y) {
   return x - y;
}

function mul(x, y) {
   return x * y;
}

function div(x, y) {
   return x / y;
}

function sumbtxy(x, y) {
   let sum = 0;
   for (let i = x; i <= y; i++) {
       sum = sum + i;
   }
   return sum;
}

function fact(n) {
   let fact = 1;
   if (n == 0 || n == 1) {
       return fact;
   } else {
       for (let i = 2; i <= n; i++) {
           fact = fact * i;
       }
       return fact;
   }
}

let num1 = 4;
let num2 = 6;
let choice = 6;

switch (choice) {
   case 1:
       console.log(num1 + " + " + num2 + " = " + add(num1, num2));
       break;
   case 2:
       console.log(num1 + " - " + num2 + " = " + sub(num1, num2));
       break;
   case 3:
       console.log(num1 + " * " + num2 + " = " + mul(num1, num2));
       break;
   case 4:
       console.log(num1 + " / " + num2 + " = " + div(num1, num2));
       break;
   case 5:
       console.log("Sum of No's between " + num1 + " and " + num2 + " = " + sumbtxy(num1, num2));
       break;
   case 6:
       console.log("Factorial of " + num1 + " is " + fact(num1));
       break;
}



#p2

Create a module with following functions
 A. To find whether given string is palindrome or not
 B. To find whether given number is Armstrong
 C. To find sum of digits of a given number 



// Exported functions in lab2node_module.js
exports.myDateTime = function () {
  return Date();
};

exports.myMessage = function () {
  return "Hello World";
};

exports.greetingFriend = function (name) {
  return "How are you, " + name;
};

exports.palindrome = function (str) {
  let rev = "";
  let str1 = str.toString();
  for (let i = str1.length - 1; i >= 0; i--) {
    rev = rev + str1.charAt(i);
  }
  if (rev == str1) return str1 + " is a Palindrome Number";
  else return str1 + " is not a Palindrome Number";
};

exports.armstrong = function (num) {
  let sum = 0;
  let temp = num;
  while (temp > 0) {
    sum = sum + Math.pow(temp % 10, 3);
    temp = parseInt(temp / 10);
  }
  if (sum == num) return num + " is an Armstrong Number";
  else return num + " is not an Armstrong Number";
};

exports.sumOfDigits = function (num) {
  let sum = 0;
  while (num > 0) {
    sum += num % 10;
    num = parseInt(num / 10);
  }
  return sum;
};

// Main file
var uselab2 = require("./lab2node_module.js");

console.log(uselab2.myDateTime());
console.log(uselab2.greetingFriend("Rohit"));
console.log(uselab2.myMessage());

var str = "abccba";
console.log(uselab2.palindrome(str));

var num = 153;
console.log(uselab2.armstrong(123));
console.log("Sum of Digits of " + num + " : " + uselab2.sumOfDigits(num));



#p3(node Server.js)

3A--Create HTTP server using http module

var h = require("http");
h.createServer(function (req, res) {
  res.writeHead(200, { "Content-Type": "text/html" });
  if (req.url == "/") {
    res.write("<html><body><h1>HOME PAGE</h1></body></html>");
  }
  if (req.url == "/student") {
    res.write("<html><body><h1>STUDENT PAGE</h1></body></html>");
  }
  res.end();
}).listen(8090);


3B--Using upper-case and http module to print text in 
uppercase

var http = require("http");
// var uc = require('upper-case');
import("upper-case").then((uc) => {
  http
    .createServer(function (req, res) {
      res.writeHead(200, { "Content-Type": "text/html" });
      res.write(uc.upperCase("<h1 style='color:blue'>Hello World</h1>"));
      res.end();
    })
    .listen(8090);
});


#p4

A Inspect http hdeader
 B Open file and print it on browser
 C Read CSV file and print on browser
 D Read pdf file and display on browser

A Inspect http headers

var h = require("http");
var u = require("util");
h.createServer(function (req, res) {
  res.writeHead(200, { "Content-Type": "text/plain" });
  res.write(u.inspect(req.headers));
  res.end();
}).listen(8090);


B Open file and print it on browser

var h = require("http");
var f = require("fs");
h.createServer(function (req, res) {
  res.writeHead(200, { "Content-Type": "text/plain" });
  var rfs = f.createReadStream("prog1.js");
  rfs.pipe(res);
}).listen(8090);


C Read CSV file and print on browser

var h = require("http");
var f = require("fs");
h.createServer(function (req, res) {
  res.writeHead(200, { "Content-Type": "text/plain" });
  var rfs = f.createReadStream("myFileWorks.csv");
  rfs.pipe(res);
}).listen(8090);


D Read pdf file and display on browser

var h = require("http");
var fs = require("fs");

fs.readFile("./Program_2.pdf", function (err, pdf) {
  if (err) throw err;

  h.createServer(function (req, res) {
    res.writeHead(200, { "Context-Type": "application/pdf" });
    res.write(pdf);
    res.end();
  }).listen(3000);
});


#P5

A)Program to use callback function for 
  Asynchronous File Read
B) Program using setTimeout to demonstrate 
   callback function - 


A) Program to use callback function for Asynchronous File Read

var fs = require("fs");

fs.readFile("input.txt", function (ferr, data) {
  if (ferr) return console.error(ferr);
  console.log(data.toString());
  console.log("Red the File ");
});

console.log("first add");
x = 5;
y = 5;
console.log("add the two number " + (x + y));


B) Program using setTimeout to demonstrate 
   callback function - 

var calculate = function (x, y, display) {
  sum = x + y;
  setTimeout(function () {
    display(sum);
  }, 20000);
  console.log("Leaving...");
};
calculate(5, 10, function (res) {
  console.log("Sum : " + res);
  console.log("Program Ends");
});
console.log("Doing Something Else...");
console.log("Please Wait...");



#P6

 A. Write a node js program to handle events using 
Event Emitter class
 B. Write a program using Event Emitter class to 
emit events for Sorting an Array, To find sum of 
odd elements of Array , to search element in the 
Array



A. Write a node js program to handle events using 
Event Emitter class


var e = require("events");
var event = new e.EventEmitter();
function CreateFile() {
  console.log("Creating a File");
}
function Read() {
  console.log("Reading a File");
}
function Write() {
  console.log("Writing a File");
}
event.addListener("IOoperations", Write);
event.addListener("IOoperations", Read);
event.once("CreateIO", CreateFile);
console.log(event.listenerCount("CreateIO"));
event.emit("CreateIO");
event.emit("IOoperations");
event.emit("IOoperations");
console.log(event.rawListeners("IOoperations"));
console.log(event.listenerCount("IOoperations"));
event.removeListener("IOoperations", Read);
event.emit("IOoperations");
console.log(event.listenerCount("IOoperations"));
event.emit("CreateIO");
console.log(event.listenerCount("CreateIO"));



B. Write a program using Event Emitter class to 
emit events for Sorting an Array, To find sum of 
odd elements of Array , to search element in the 
Array

var e = require("events");
var evmt = new e.EventEmitter();
var A = [7, 2, 5, 4, 3, 6];
var st = ["a", "v", "e", "d"];
function sortarray() {
  console.log("Array before Sorting : ");
  console.log(st);
  st.sort();
  console.log("Array After Sorting : ");
  console.log(st);
}
function sumofevenelements() {
  var sum = 0;
  for (i = 0; i < A.length; i++) {
    if (i % 2 != 0) sum += A[i];
  }
  console.log("Sum of Even elements in array is " + sum);
}
function sumofoddelements() {
  var sum = 0;
  for (i = 0; i < A.length; i++) {
    if (i % 2 == 0) sum += A[i];
  }
  console.log("Sum of odd elements in array is " + sum);
}
var searcharray = function (ch) {
  var flag = false;
  for (i = 0; i < st.length; i++) {
    if (st[i] == ch) {
      flag = true;
      break;
    }
  }
  if (flag) console.log(ch + " is found");
  else console.log(ch + " is not found");
};
evmt.addListener("sort", sortarray);
evmt.on("sumeven", sumofevenelements);
evmt.on("sumodd", sumofoddelements);
evmt.on("search", searcharray);
evmt.emit("sort");
evmt.emit("sumodd");
evmt.emit("sumeven");
evmt.emit("search", "e");


#prc7


// Import the 'events' module
var e = require("events");

// Create an instance of EventEmitter
var event = new e.EventEmitter();

/**
 * Function to start the tea-making process.
 * Emits the 'gason' event after printing a message.
 */
function tea() {
  console.log("Making Tea");
  event.emit("gason"); // Trigger the next step: turning on the gas
}

// Register the 'tea' event listener
event.addListener("tea", tea);

/**
 * Function to simulate turning on the gas.
 * Emits the 'boilwater' event after printing a message.
 */
function gason() {
  console.log("Put the gas on...");
  event.emit("boilwater"); // Trigger the next step: boiling water
}

// Register the 'gason' event listener
event.addListener("gason", gason);

/**
 * Function to simulate boiling water.
 * Emits the 'addtea' event after printing a message.
 */
function boilwater() {
  console.log("Let the water boil...");
  event.emit("addtea"); // Trigger the next step: adding tea leaves
}

// Register the 'boilwater' event listener
event.addListener("boilwater", boilwater);

/**
 * Function to simulate adding tea leaves.
 * Emits the 'milkandsugar' event after printing a message.
 */
function addtea() {
  console.log("Adding tea leaves in the water");
  event.emit("milkandsugar"); // Trigger the next step: adding milk and sugar
}

// Register the 'addtea' event listener
event.addListener("addtea", addtea);

/**
 * Function to simulate adding milk and sugar.
 * This is the final step, so no further events are emitted.
 */
function milkandsugar() {
  console.log("Adding milk and sugar");
  console.log("Tea is Ready!");
}

// Register the 'milkandsugar' event listener
event.addListener("milkandsugar", milkandsugar);

// Start the sequence by emitting the 'tea' event
event.emit("tea");






#prc8

A. Customer information passed as argument 
to traditional function attached to event emitter 
B. Salary calculation arrow/lambda function 


A. Customer information passed as argument 
to traditional function attached to event emitter

var e = require("events");
var event = new e.EventEmitter();

// Define the customerInfo function
var customerInfo = function (code, cname, city, emailid) {
  console.log("Customer No : " + code);
  console.log("Customer Name : " + cname);
  console.log("City : " + city);
  console.log("Email Id : " + emailid);
};

// Bind the customerInfo event
event.on("customerInfo", customerInfo);

// Emit the customerInfo event with arguments
event.emit("customerInfo", 1, "Rohit", "Kanjurmarg", "mca24_1560@met.edu");





B. Salary calculation arrow/lambda function 


var e = require("events");
var event = new e.EventEmitter();
event.on("calculateSalary", (basic) => {
  var hra = (basic * 60) / 100;
  var da = basic;
  var pt = 200;
  var it = (basic * 30) / 100;
  var gross = basic + hra + da + pt + it;
  var net = gross - (pt + it);
  console.log(`Basic Salary : ${basic}`);
  console.log(`Dearness Allowance : ${da}`);
  console.log(`HRA : ${hra}`);
  console.log(`Profession Tax : ${pt}`);
  console.log(`Income Tax : ${it}`);
  console.log(`Gross Salary : ${gross}`);
  console.log(`Net Salary : ${net}`);
});
event.emit("calculateSalary", 50000);



#prac9

To Perform following file operations : 
1) File Read
 2) File Write
 3) File Append
 4) File Delete
 5) Rename



1) File Read

const fs = require("fs");

// Read the content of a file
fs.readFile("input.txt", "utf8", (err, data) => {
    if (err) {
        console.error("Error reading the file:", err);
    } else {
        console.log("File Content:\n" + data);
        console.log("File Read Successfully!");
    }
});


2) File Write

const fs = require("fs");

// Write content to a file
try {
  fs.writeFileSync("testfile.txt", "Hello World, Good Morning!");
  console.log("Write File Successful...");
} catch (ferr) {
  console.error("Error writing file: ", ferr);
}

// Read content from a file
fs.readFile("input.txt", function (ferr, filedata) {
  if (ferr) {
    console.error("Error reading file: ", ferr);
  } else {
    console.log(filedata.toString());
    console.log("Reading File...");
  }
});



3) File Append

var f = require("fs");
data = f.readFileSync("testFile.txt", "utf-8");
console.log("Before Appending : " + data.toString());
f.appendFileSync("testFile.txt", "Appending New Data");
console.log("Appending Complete");
f.readFile("testFile.txt", function (err, data) {
  if (err) console.log(err);
  else console.log("\nAfter Appending : " + data.toString());
});



4) File Delete

var f=require('fs');
 f.unlink("testfile.txt", function(){
 console.log("Delete operation Completed!");
 });
 f.readFile("testfile.txt", "utf-8", function(error, data){
 if(error) console.log(error);
 else console.log(data);
 });


5) Rename

var f = require("fs");
f.unlink("testfile.txt", function () {
  console.log("Delete operation Completed!");
});
f.readFile("testfile.txt", "utf-8", function (error, data) {
  if (error) console.log(error);
  else console.log(data);
});

var f = require("fs");
f.mkdirSync("./test");
f.writeFileSync("testFile.txt", "Welcome to files");
f.renameSync("testFile.txt", "newFile.txt");
f.readFile("newfile.txt", function (err, data) {
  if (err) return console.error(err);
  else {
    console.log("Reading File");
    console.log(data.toString());
  }
});


#prac 10

Perform following operations on table : 
1) Connect
2) Create Database
3) Create Table
4) Insert values


Create database : 

var mysql = require('mysql2');
 var con = mysql.createConnection({
    host : "localhost",
    user : "root",
    password : "root",
    database : "student",
    port : 3308
 });
 con.connect(function(err){
    if(err) throw err;
    console.log("Connected to mySql");
 });
 con.query("CREATE DATABASE faculty", function(err){
    if(err) throw err;
    console.log("Faculty Database Created!");
 });


#Create Table & Insert a Row : 

var mysql = require('mysql2');
 var con = mysql.createConnection({
    host : "localhost",
    user : "root",
    password : "root",
    database : "student",
    port : 3309
 });
 con.connect(function(err){
if(err) throw err;
 console.log("Connected to mySql");
 });
 con.query("CREATE TABLE student(rollno int primary key, name VARCHAR(255), address 
VARCHAR(255))", function(err){
 if(err) throw err;
 console.log("Student Table Created!");
 });
 con.query("INSERT INTO student VALUES(1535, 'Rohit', 'Mumbai')", function(err){
 if(err) throw err;
 console.log("Row Inserted");
 });


#prac11

Program to defer execution and cancel Execution 
of function

i = 0;
var inter = setInterval(function () {
  ++i;
  console.log("Hello There : " + i);
  if (i == 10) clearInterval(inter);
}, 3000);
process.nextTick(function () {
  console.log("Urgent task");
});
setImmediate(() => {
  console.log("Running before the timeout => number 3");
});
var t = setTimeout(function () {
  console.log("Time out example!");
}, 2000);
clearTimeout(t);
console.log("Program is running!");
console.log("Hello => Number 1");
setTimeout(() => {
  console.log("The timeout running last => number 4");
}, 100);
process.nextTick(() => {
  console.log("Running at next tick => number 2");
});


#prac12

---------------->>>>>>>React

Step 1 : Create ReactJs Folder
Step 2 : Create a npm folder in C:\Users\mcamock\AppData\Roaming
Step 3 : Install npm
Step 4 : Create React App by npx create-react-app my-app
Step 5 : Go to cd my-app
Step 6 : npm start in terminal
Step 7 : Type program in App.js



1---Hello World-----

>>App.js

import React from "react";

function App() {
  return (
    <div style={{ textAlign: "center", marginTop: "50px" }}>
      <h1>Hello, World!</h1>
    </div>
  );
}

export default App;


#prac13

 Adding multiple lines in return.
 Creating new App.
 Add new style in App.css.
 Making use of variables.


#App.js

import React from "react";
import "./App.css";
function App() {
  return (
    <div>
      <h1>Hello World!</h1>
      <p>Welcome to MET</p>
      <hr />
      <table border={2}>
        <tbody>
          <tr>
            <th>Roll No</th>
            <th>Name</th>
          </tr>
          <tr>
            <td>1560</td>
            <td>Rohit</td>
          </tr>
          <tr>
            <td>1561</td>
            <td>Yash</td>
          </tr>
          <tr>
            <td>1563</td>
            <td>Siddharth</td>
          </tr>
          <tr>
            <td>1538</td>
            <td>Ritesh</td>
          </tr>
          <tr>
            <td>1545</td>
            <td>Shivam</td>
          </tr>
          <tr>
            <td>1554</td>
            <td>Shubham</td>
          </tr>
        </tbody>
      </table>
    </div>
  );
}
export default App;

-----------------------------------

# App1.js

 import React from 'react';
 import './App.css';
 function App1() {
    const color = "red";
  return (
    <div className='container'>
        <h1 style={{'color':color}}>Hello World</h1>
        <p>Rohit Singh (●' '●) ◡ </p>?￰ﾤﾣﾟ?
    </div>
  );
 }
 export default App1;



#prac14

JSX to add multiple HTML elements and create Complex Pages 

 A. To create buttons with emoji and handle click event
 B. To generalise the event funtion create an array for emojis and use map function

A. To create buttons with emoji and handle click event

 //JSX to add many HTML elements and nest them to
 import React from 'react';
 import './App.css'
 function App2()
 {
    return (
        <div className="container" style={{textAlign:'center'}}>
            <h1>Welcome to Met</h1>
            <p>Let's Party</p>
            <u>
                <li>
                    <button onClick={event =>alert(event.target.id)}>
                    <span role='img' aria-label="grinning_face" id='grinning_face'>
                        😎
                    </span>
                    </button>
                </li>
                <li>
                <button onClick={event =>alert(event.target.id)}>
                    <span role='img' aria-label="party_popper" id='party_popper'>
                        😁
                    </span>
                </button>
                </li>
            </u>
        </div>
    )
 }
export default App2;


B. To generalise the event funtion create an array for emojis and use map function

import React from "react";
import "./App.css";
const displayEmojiName = (event) => alert(event.target.id);
const emoji = [
  {
    emoji: "🍕",
    name: "Pizza",
  },
  {
    emoji: "👻",
    name: "Ghost",
  },
  {
    emoji: "😡",
    name: "Angry Face",
  },
];
function App4() {
  return (
    <div className="container">
      {emoji.map((emoji) => (
        <li key={emoji.name}>
          <button onClick={displayEmojiName}>
            <span
              role="img"
              src={emoji.emoji}
              aria-label={emoji.name}
              id={emoji.name}
            >
              {emoji.emoji}
            </span>
          </button>
        </li>
      ))}
    </div>
  );
}
export default App4;


#prac15

#Components
#To create Functional and Class components using props and 
State

>>App.js

 import React from 'react';
 import './App.css';
 import Greet from './components/Greet';
 import Welcome from './components/Welcome';
 import ProductImg from './components/ProductImg';
 import pimg from './components/camera.jpg';
 import pimg1 from './components/phone.jfif';
 import Count from './components/counter';
 function App() {
    return (
        <div className="container">
            <Greet name="Flavia" Surname="Gonsalves" />
            <Greet name="Chetna" Surname="Achar" />
            <Greet name="Neha" Surname="Lodhe" />
            <Welcome />
            <ProductImg im={pimg}  />
            <ProductImg im={pimg1} />
            <Count></Count>
        </div>
    );
 }
 export default App;


>>>Greet.js

 import React from 'react'
 function Greet(props){
    console.log(props);
    return <h1>Hello {props.name} {props.Surname}</h1>;
 }
 export default Greet;

>>>Welcome.js

import React,{Component} from 'react';
 class Welcome extends Component {
    render() {
        return <div>
            <h1>Class Component</h1>
            <h3>Inside Welcome</h3>
        </div>
        
    }
 }
 export default Welcome;


>>>>>ProductImg.js


import React,{Component} from 'react';
 class ProductImg extends Component
 {
    render()
    {
        return(
            <div>
                <img src={this.props.im} alt="Product Image"></img>
                <p>This is Product Component</p>
            </div>
        )
    }
 }
 export default ProductImg


>>>> Counter.js

 import React, { Component } from "react";
 class Counter extends Component{
    constructor(props){
        super(props);
        this.state = {
            count: 0        
        }
    }
    updateClick=()=>{
        this.setState({count:this.state.count +1})
    }
    render()
    {
        const {count} = this.state.count;
        return (
            <>
            <button onClick = {this.updateClick}>Visit Click</button>
            <p>Visited {this.state.count} times</p>
            </>
        )
    }
 }
 export default Counter;


--------------------------------------------------------------------------------------------------------------------------
#Prac17

#Implementation of use State hook(Design a Calculator using useState)

>C:\reactjs\test-app> npm install bootstrap


>>>>index.js

import React from "react";
import ReactDOM from "react-dom/client";
import '../node_modules/bootstrap/dist/css/bootstrap.min.css'
import "./index.css";
import App6 from "./App6";

import reportWebVitals from "./reportWebVitals";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <App6 />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


>>>temp.css

import React from "react";
import ReactDOM from "react-dom/client";
import '../node_modules/bootstrap/dist/css/bootstrap.min.css'
import "./index.css";
import App6 from "./App6";

import reportWebVitals from "./reportWebVitals";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <App6 />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


>>>Calculator.js

import React, { useState } from "react";
import "./temp.css";

function Calculator() {
  const [val, setVal] = useState("");

  return (
    <div className="container">
      <div className="row">
        <div className="col-12">
          <h1 className="display-5 fw-bolder text-primary">Calculator</h1>
        </div>
      </div>
      <div>
        <input type="text" value={val} readOnly />
      </div>
      <div>
        <button
          className="button"
          value="1"
          onClick={(e) => setVal(val + e.target.value)}
        >
          1
        </button>
        <button
          className="button"
          value="2"
          onClick={(e) => setVal(val + e.target.value)}
        >
          2
        </button>
        <button
          className="button"
          value="3"
          onClick={(e) => setVal(val + e.target.value)}
        >
          3
        </button>
        <button
          className="button"
          value="C"
          onClick={() => setVal("")} // Fix for resetting the value
        >
          C
        </button>
        <button
          className="button"
          value="CE"
          onClick={() => setVal(val.slice(0, -1))} // Fix for deleting last character
        >
          ↩
        </button>
      </div>
      <div>
        <button
          className="button"
          value="4"
          onClick={(e) => setVal(val + e.target.value)}
        >
          4
        </button>
        <button
          className="button"
          value="5"
          onClick={(e) => setVal(val + e.target.value)}
        >
          5
        </button>
        <button
          className="button"
          value="6"
          onClick={(e) => setVal(val + e.target.value)}
        >
          6
        </button>
        <button
          className="button"
          value="+"
          onClick={(e) => setVal(val + e.target.value)}
        >
          +
        </button>
        <button
          className="button"
          value="%"
          onClick={(e) => setVal(val + e.target.value)}
        >
          %
        </button>
      </div>
      <div>
        <button
          className="button"
          value="7"
          onClick={(e) => setVal(val + e.target.value)}
        >
          7
        </button>
        <button
          className="button"
          value="8"
          onClick={(e) => setVal(val + e.target.value)}
        >
          8
        </button>
        <button
          className="button"
          value="9"
          onClick={(e) => setVal(val + e.target.value)}
        >
          9
        </button>
        <button
          className="button"
          value="-"
          onClick={(e) => setVal(val + e.target.value)}
        >
          -
        </button>
        <button
          className="button"
          value="^2"
          onClick={() => setVal((parseFloat(val) ** 2).toString())} // Fix for square operation
        >
          ^2
        </button>
      </div>
      <div>
        <button
          className="button"
          value="0"
          onClick={(e) => setVal(val + e.target.value)}
        >
          0
        </button>
        <button
          className="button"
          value="."
          onClick={(e) => setVal(val + e.target.value)}
        >
          .
        </button>
        <button
          className="button"
          value="*"
          onClick={(e) => setVal(val + e.target.value)}
        >
          *
        </button>
        <button
          className="button"
          value="/"
          onClick={(e) => setVal(val + e.target.value)}
        >
          /
        </button>
        <button
          className="button"
          value="="
          onClick={() => setVal(eval(val).toString())} // Fix for evaluating expression
        >
          =
        </button>
      </div>
    </div>
  );
}

export default Calculator;


>>>App6.js

import React from "react";
// import Form from "./components/form";
import Calculator from "./components/Calculator";
function App6() {
  return (
    <div>
      <Calculator />
    </div>
  );
}
export default App6;

----------------------------------------------------------------------------------------------------

#prac16

#Form Handling REACT

#Create a form handling to show the working of 
form using React


>>>>Form.js

import React, { Component } from "react";
export class Form extends Component {
  constructor(props) {
    super(props);
    this.state = {
      username: "",
      comments: "",
      topic: "ReactJs",
    };
  }

  handleUsernameChange = (event) => {
    this.setState({ username: event.target.value });
  };
  handleCommentsChange = (event) => {
    this.setState({ comments: event.target.value });
  };
  handleTopicsChange = (event) => {
    this.setState({ topic: event.target.value });
  };
  handleSubmit = (event) => {
    alert(`${this.state.username}`);
    event.preventDefault();
  };
  render() {
    return (
      <form onSubmit={this.handleSubmit}>
        <div>
          <label>Username : </label>
          <input
            type="text"
            value={this.state.username}
            onChange={this.handleUsernameChange}
          />
          <br />
          <br />
          <label>Comments : </label>
          <textarea
            value={this.state.comments}
            onChange={this.handleCommentsChange}
          />
          <br />
          <br />
          <label>Topics : </label>
          <select value={this.state.topic} onChange={this.handleTopicsChange}>
            <option value="NodeJs">NodeJs</option>
            <option value="ReactJs">ReactJs</option>
            <option value="PHP">PHP</option>
            <option value="ASP.NET">ASP.NET</option>
          </select>
          <br />
          <br />
          <button>Submit</button>
        </div>
      </form>
    );
  }
}
export default Form;


>>>App7.js

import React from "react";
import Form from "./components/Form";
// import Calculator from "./components/Calculator";
function App7() {
  return (
    <div>
      <Form />
    </div>
  );
}
export default App7;



-----------------------------------------------------------

#prac17

ProductCard


>>>Data.js

import "./dtemp.css";
const data = [
  {
    pname: "Samsung Galaxy S22 5G",
    price: 72900,
    rating: 4.5,
  },
  {
    pname: "OnePlus Nord 2T 5G",
    price: 33999,
    rating: 4.2,
  },
  {
    pname: "Realme C11 2021",
    price: 8900,
    rating: 3.2,
  },
];

export default data;


>>>ProductCard.js

import React from "react";
export default function ProductCard({ additional, pname, price, rating }) {
  return (
    <div>
      <h3>{pname}</h3>
      <h4>{price}</h4>
      <h5>{rating}</h5>
    </div>
  );
}


App8.js

import "./App.css";
import ProductCard from "./components/ProductCard";
import data from "./components/Data";
function App8() {
  return (
    <div className="wrapper">
      <h1>Products</h1>
      {data.map((product) => (
        <ProductCard
          key={product.pname}
          pname={product.pname}
          price={product.price}
          rating={product.rating}
        />
      ))}
    </div>
  );
}
export default App8;

--------------------------------------------------------------------------


#prac18

#Shoping card

#To design shopping cart using class 
component and state

>>>>App9.js

import "./App.css";
import Product from "./components/Product";
function App9() {
  return <Product />;
}
export default App9;



>>>Product.js

import React, { Component } from "react";

const products = [
  {
    pr: "🍦",
    name: "ice cream",
    price: 50,
  },
  {
    pr: "🍩",
    name: "donuts",
    price: 190,
  },
  {
    pr: "🍉",
    name: "watermelon",
    price: 30,
  },
];

export class Product extends Component {
  state = {
    cart: [],
    total: 0,
  };

  currencyOptions = {
    minimumFractionDigits: 2,
    maximumFractionDigits: 2,
  };

  getTotal = () => {
    return this.state.total.toLocaleString(undefined, this.currencyOptions);
  };

  add = (product) => {
    this.setState((state) => ({
      cart: [...state.cart, product.name],
      total: state.total + product.price,
    }));
  };

  remove = (product) => {
    this.setState((state) => {
      const cart = [...state.cart];
      const index = cart.indexOf(product.name);
      if (index !== -1) {
        cart.splice(index, 1);
      }
      return {
        cart,
        total: state.total - product.price,
      };
    });
  };

  render() {
    return (
      <div>
        <div>Shopping Cart: {this.state.cart.length} items</div>
        <div>Total: {this.getTotal()}</div>
        <div>
          {products.map((product) => (
            <div key={product.name} style={{ marginBottom: "10px" }}>
              <div>
                <span role="img" aria-label={product.name}>
                  {product.pr} - ₹{product.price}
                </span>
              </div>
              <button
                onClick={() => this.add(product)}
                style={{ marginRight: "5px" }}
              >
                Add
              </button>
              <button onClick={() => this.remove(product)}>Remove</button>
            </div>
          ))}
        </div>
      </div>
    );
  }
}

export default Product;


-------------------------------------------------------------------------------------------------------

















































